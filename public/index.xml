<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/mirror-tank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/mirror-tank/</guid>
      <description>Unity-Mirror-学习笔记(Tank) 通过Mirror内置的例子来学习其用法，此为笔记。&#xA;游戏对象以及其使用到的Network组件 NetworkManager 1 NetworkManagerHUD2&#xA;[Telepathy Transport](#Telepathy Transport)&#xA;NetworkManager&#xA;Spawn(GameObject)3 NetworkStartPosition&#xA;UI-Canvas(GameObject)4 TankGameManager(Script)&#xA;Tank(Perfab-GameObject)5 NetWorkIdentity&#xA;NetworkTransform&#xA;Tank(Script)&#xA;各组件以及脚本的用处 NetworkManager&#xA;游戏状态管理 生成管理 场景管理 调试信息 自定义个性化 NetWorkManager是联机的核心组件，可以通过Inspector界面调整具体参数。&#xA;每个Scene只能有一个NetworkManager，多余的会自动删除。由于具有NetworkIdentity组件的对象在加载场景的时候会自动禁用，所以NetworkManager不能放在游戏对象（会有操作）上。&#xA;NetworkManager可以通过派生来根据项目实际需求来修改，自定义化，但如果项目不大，还是保持原样效率会更高。&#xA;Telepathy Transport 在给游戏对象添加NetworkManager的时候会自动加上Telepathy Transport组件。这是一个管理数据传输的组件，如果有需要可以使用自己已有的，Inspector上的NetworkManager-NetworkInfo-Transport上切换即可。&#xA;游戏状态管理 NetworkManager有三种运行模式-分别是：Server（仅服务器），Host（同时作为服务器和客户端），Client（仅客户端）。&#xA;如果使用NetworkManagerHUD2则可直接在游戏运行时选择运行模式，自己调用为最优（一般来说）。&#xA;调用的方法：&#xA;NetworkManager.StartClient();&#xA;NetworkManager.StartServer();&#xA;NetworkManager.StartHost();&#xA;如果脚本没有提前建立存放NetworkManager引用位6的话,只需要直接调用单例7就好。&#xA;以Client模式开启前最好改变一下这个属性：NetworkManager.networkAddress&#xA;也就是IP地址，同一台电脑上测试只需要填写localhost即可，但基本上用的时候肯定不是同一设备，所以可以增加一项功能：开启主机端，会在游戏内展示本机IP。&#xA;C#获取自机IP的语句：&#xA;public string GetLocalIp() { ///获取本地的IP地址 string IP = string.Empty; foreach (IPAddress _IPAddress in Dns.GetHostEntry(Dns.GetHostName()).AddressList) { if (_IPAddress.AddressFamily.ToString() == &amp;#34;InterNetwork&amp;#34;) { AddressIP = _IPAddress.ToString(); } } return AddressIP; } 我的做法是弹出输入框让玩家输入主机端玩家提供的IP，玩家多一步操作。</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/testfolder/onlinegameproject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/testfolder/onlinegameproject/</guid>
      <description>OnlineGameProject_Ver0.1 纯C#&#xA;用户注册登录。&#xA;定期用户信息存档。&#xA;Socket TCP协议&#xA;金融交易系统，根据特定算法每天给出，或每（小时/天）给出数值。&#xA;解密，手绘风+彩色描边+机能风+赛博背景故事。&#xA;全景地图：存在着一次次的线索，观察细节部分揭露事实。&#xA;假设1：双金币资源不共用，金融系统用点数，其他用货币，玩家的最基本战力基础就算服务器矩阵的算力，租用服务器可以以低廉的价格用到好的服务器但是限时且如果做了一些攻击性事件的时候容易被查。自己买会很贵，而且要交电费（服务器本身、空调），还有房费等，但毕竟难寻找源头且受限小。服务器矩阵以及算法做成可自定义，增加可玩性。&#xA;UserAccount:&#xA;玩法：&#xA;解密&#xA;金融系统&#xA;日常运营小店铺（要考虑）&#xA;AcrylicServer需要具备的功能：&#xA;接受与发送信息：&#xA;监听特定端口（12345） 群发信息 对用户数据进行管理 (进化方向：xml or json)&#xA;对Msg类进行序列化处理&#xA;Msg信息包含：&#xA;日期DateTime 调用的方法 string 数字 内容 string 暂定方法编号：string&#xA;ToServer：&#xA;1001 登录请求&#xA;1002 注册请求&#xA;1003 金融账号登录请求&#xA;1004 金融账号注册请求&#xA;ToClient:&#xA;10011 登录成功&#xA;10010 登录失败&#xA;10021 注册成功&#xA;10020 注册失败&#xA;10031 金融账号登录成功&#xA;10030 金融账号登录失败&#xA;10041 金融账号注册成功&#xA;10040 金融账号注册失败&#xA;2021.3.19/开发日志：&#xA;需要修改序列化方法，改为json，再测试注册登录等信息。&#xA;2021.3.20/开发日志：&#xA;问题不在于序列化，在于连接服务器的时候服务器会发送一则不规范的信息，已修改。&#xA;服务器暂时正常，客户端的Client脚本需要优化，脱离MonoBehaviour(Unity内部好屑)&#xA;2021.3.21/开发日志:&#xA;暂时解决所有登录问题，获取用户数据正常。但曾经服务器端出现过&#xA;Additional text encountered after finished reading JSON content</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/testfolder/playable%E8%B0%83%E6%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/testfolder/playable%E8%B0%83%E6%9F%A5/</guid>
      <description>开发者手册&#xA;官方描述-Offical Define Playables API 提供一种通过组织和评估树状结构（称为 PlayableGraph）中的数据源来创建工具、效果或其他游戏机制的方法。PlayableGraph 允许您混合、融合和修改多个数据源，并通过单个输出播放它们。&#xA;Playables API 支持动画、音频和脚本。Playables API 还提供通过脚本与动画系统和音频系统进行交互的能力。&#xA;尽管 Playables API 目前仅限于动画、音频和脚本，但它是一种通用 API，最终可供视频和其他系统使用。&#xA;Playable核心播放项需要继承IPlayable、而输出项需要继承IPlayableOutput&#xA;核心播放类：&#xA;核心输出类：&#xA;Playable是所有可播放项的基本类型，所以所有播放项变种都可以在需要的时候隐式转换为Playable&#xA;PlayableOutput也是如此，是所有可播放项输出的基本类型，定义了基本方法。&#xA;Playable 和 PlayableOutput 未暴露大量方法。但“PlayableExtensions”和“PlayableOutputExtensions”静态类提供了扩展方法。&#xA;所有非抽象可播放项都有一个公有静态方法 Create()，该方法创建相应类型的可播放项。“Create()”方法始终将 PlayableGraph 作为其第一个参数，该图拥有新创建的可播放项。某些类型的可播放项可能需要其他参数。非抽象可播放项输出还会暴露 Create() 方法。&#xA;有效的可播放项输出应链接到可播放项。如果可播放项输出未链接到可播放项，则可播放项输出不执行任何操作。要将可播放项输出链接到可播放项，请使用 PlayableOutput.SetSourcePlayable() 方法。对于该特定可播放项输出，链接的可播放项充当可播放项树的根。&#xA;流程 PlayGraph是可以播放的，通过PlayableGraph.Create(string GraphName)获取。&#xA;然后可以将一些Playable节点添加到PlayableGraph激活Graph的.Play()&#xA;ScriptPlayable : Playable一个可播放的行为，我们通过ScriptPlayable&amp;lt;T\&amp;gt;.Create(graphThatItShouldGoTo);来创建&#xA;随后创建一个继承于PlayableBehaviour的自定义Playable行为就行，把这个继承PlayableBehaivour的组件放入上述的T中即可。&#xA;这些都是动态的，也就是写进代码，运行的时候生成的。所以你也只能在运行的时候才能从PlayableGraphVisualizer里面看到。&#xA;保存 PlayableAsset正是为此设计，其继承于ScriptableObject，你可以通过PlayableAsset.CreatePlayable(graph,gameObject);来直接加载。&#xA;常用方法 要将两个可播放项连接在一起，请使用 PlayableGraph.Connect() 方法。请注意，某些可播放项不能有输入。&#xA;使用 PlayableGraph.Create() 静态方法来创建 PlayableGraph。&#xA;使用 PlayableGraph.Play() 方法来播放 PlayableGraph。&#xA;使用 PlayableGraph.Stop() 方法来停止播放 PlayableGraph。&#xA;使用 PlayableGraph.Evaluate() 方法来评估 PlayableGraph 在特定时间的状态。&#xA;使用 PlayableGraph.Destroy() 方法来手动销毁 PlayableGraph。此方法会自动销毁 PlayableGraph 创建的所有可播放项和可播放项输出。必须手动调用此销毁方法来销毁 PlayableGraph，否则 Unity 会发出一条错误消息。</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/testfolder/protobuf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/testfolder/protobuf%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>Protobuf 定义 协议缓冲区提供了一种语言中立、平台中立、可扩展的机制，用于以向前兼容和向后兼容的方式序列化结构化数据。它类似于 JSON，只是它更小更快，并且生成本地语言绑定。&#xA;基本流程:&#xA;根据自定义数据类型简历.proto：Protocol Buffers文件&#xA;根据需要使用的平台，使用ProtoBuf编译器将定义好的.proto文件编译生成对应平台的库。&#xA;在编程软件类调用第二步生成的库是实现序列化。&#xA;命令行操作:&#xA;protoc protoFile.proto --csharp_out=targetDir 中文参考教材</description>
    </item>
  </channel>
</rss>
